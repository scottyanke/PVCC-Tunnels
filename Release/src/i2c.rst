                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.7.0 #10231 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module i2c
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _i2c_init
                                     12 	.globl _i2c_clear
                                     13 	.globl _i2c_start
                                     14 	.globl _i2c_stop
                                     15 	.globl _i2c_write
                                     16 	.globl _i2c_write_addr
                                     17 	.globl _i2c_read
                                     18 	.globl _i2c_read_arr
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area DATA
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area INITIALIZED
                                     27 ;--------------------------------------------------------
                                     28 ; absolute external ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DABS (ABS)
                                     31 ;--------------------------------------------------------
                                     32 ; global & static initialisations
                                     33 ;--------------------------------------------------------
                                     34 	.area HOME
                                     35 	.area GSINIT
                                     36 	.area GSFINAL
                                     37 	.area GSINIT
                                     38 ;--------------------------------------------------------
                                     39 ; Home
                                     40 ;--------------------------------------------------------
                                     41 	.area HOME
                                     42 	.area HOME
                                     43 ;--------------------------------------------------------
                                     44 ; code
                                     45 ;--------------------------------------------------------
                                     46 	.area CODE
                                     47 ;	../src/i2c.c: 6: void i2c_init() {
                                     48 ;	-----------------------------------------
                                     49 ;	 function i2c_init
                                     50 ;	-----------------------------------------
      00808C                         51 _i2c_init:
                                     52 ;	../src/i2c.c: 7: I2C->FREQR = 0x16;
      00808C 35 16 52 12      [ 1]   53 	mov	0x5212+0, #0x16
                                     54 ;	../src/i2c.c: 8: I2C->CCRL = 0xa0; // 100kHz
      008090 35 A0 52 1B      [ 1]   55 	mov	0x521b+0, #0xa0
                                     56 ;	../src/i2c.c: 9: I2C->CCRH &= ~(0x80); // standard mode
      008094 72 1F 52 1C      [ 1]   57 	bres	21020, #7
                                     58 ;	../src/i2c.c: 10: I2C->OARH = 0x40;  // I2C_OARH_ADDMODE; // 7-bit addressing
      008098 35 40 52 14      [ 1]   59 	mov	0x5214+0, #0x40
                                     60 ;	../src/i2c.c: 11: I2C->CR1 = I2C_CR1_PE;
      00809C 35 01 52 10      [ 1]   61 	mov	0x5210+0, #0x01
                                     62 ;	../src/i2c.c: 12: }
      0080A0 81               [ 4]   63 	ret
                                     64 ;	../src/i2c.c: 14: void i2c_clear() {
                                     65 ;	-----------------------------------------
                                     66 ;	 function i2c_clear
                                     67 ;	-----------------------------------------
      0080A1                         68 _i2c_clear:
                                     69 ;	../src/i2c.c: 15: (void) I2C->SR1;
      0080A1 AE 52 17         [ 2]   70 	ldw	x, #0x5217
      0080A4 F6               [ 1]   71 	ld	a, (x)
                                     72 ;	../src/i2c.c: 16: I2C->DR = 0x00;
      0080A5 35 00 52 16      [ 1]   73 	mov	0x5216+0, #0x00
                                     74 ;	../src/i2c.c: 17: }
      0080A9 81               [ 4]   75 	ret
                                     76 ;	../src/i2c.c: 19: uint8_t i2c_start() {
                                     77 ;	-----------------------------------------
                                     78 ;	 function i2c_start
                                     79 ;	-----------------------------------------
      0080AA                         80 _i2c_start:
                                     81 ;	../src/i2c.c: 21: I2C->CR2 |= I2C_CR2_START;
      0080AA 72 10 52 11      [ 1]   82 	bset	21009, #0
                                     83 ;	../src/i2c.c: 22: i = 0;	// this is done to set a limit on how long to wait
      0080AE 5F               [ 1]   84 	clrw	x
                                     85 ;	../src/i2c.c: 23: while (!(I2C->SR1 & I2C_SR1_SB) && i < 800)
      0080AF                         86 00102$:
      0080AF C6 52 17         [ 1]   87 	ld	a, 0x5217
      0080B2 44               [ 1]   88 	srl	a
      0080B3 25 08            [ 1]   89 	jrc	00104$
      0080B5 A3 03 20         [ 2]   90 	cpw	x, #0x0320
      0080B8 24 03            [ 1]   91 	jrnc	00104$
                                     92 ;	../src/i2c.c: 24: i++;
      0080BA 5C               [ 1]   93 	incw	x
      0080BB 20 F2            [ 2]   94 	jra	00102$
      0080BD                         95 00104$:
                                     96 ;	../src/i2c.c: 25: if (i > 799)
      0080BD A3 03 1F         [ 2]   97 	cpw	x, #0x031f
      0080C0 23 02            [ 2]   98 	jrule	00106$
                                     99 ;	../src/i2c.c: 26: return 0;
      0080C2 4F               [ 1]  100 	clr	a
      0080C3 81               [ 4]  101 	ret
      0080C4                        102 00106$:
                                    103 ;	../src/i2c.c: 28: return 1;
      0080C4 A6 01            [ 1]  104 	ld	a, #0x01
                                    105 ;	../src/i2c.c: 29: }
      0080C6 81               [ 4]  106 	ret
                                    107 ;	../src/i2c.c: 31: uint8_t i2c_stop() {
                                    108 ;	-----------------------------------------
                                    109 ;	 function i2c_stop
                                    110 ;	-----------------------------------------
      0080C7                        111 _i2c_stop:
                                    112 ;	../src/i2c.c: 33: I2C->CR2 |= I2C_CR2_STOP;
      0080C7 72 12 52 11      [ 1]  113 	bset	21009, #1
                                    114 ;	../src/i2c.c: 34: i = 0;
      0080CB 5F               [ 1]  115 	clrw	x
                                    116 ;	../src/i2c.c: 35: while ((I2C->SR3 & I2C_SR3_MSL) && i < 800)
      0080CC                        117 00102$:
      0080CC C6 52 19         [ 1]  118 	ld	a, 0x5219
      0080CF 44               [ 1]  119 	srl	a
      0080D0 24 08            [ 1]  120 	jrnc	00104$
      0080D2 A3 03 20         [ 2]  121 	cpw	x, #0x0320
      0080D5 24 03            [ 1]  122 	jrnc	00104$
                                    123 ;	../src/i2c.c: 36: i++;
      0080D7 5C               [ 1]  124 	incw	x
      0080D8 20 F2            [ 2]  125 	jra	00102$
      0080DA                        126 00104$:
                                    127 ;	../src/i2c.c: 37: if (i > 799)
      0080DA A3 03 1F         [ 2]  128 	cpw	x, #0x031f
      0080DD 23 02            [ 2]  129 	jrule	00106$
                                    130 ;	../src/i2c.c: 38: return 0;
      0080DF 4F               [ 1]  131 	clr	a
      0080E0 81               [ 4]  132 	ret
      0080E1                        133 00106$:
                                    134 ;	../src/i2c.c: 40: return 1;
      0080E1 A6 01            [ 1]  135 	ld	a, #0x01
                                    136 ;	../src/i2c.c: 41: }
      0080E3 81               [ 4]  137 	ret
                                    138 ;	../src/i2c.c: 43: void i2c_write(uint8_t data) {
                                    139 ;	-----------------------------------------
                                    140 ;	 function i2c_write
                                    141 ;	-----------------------------------------
      0080E4                        142 _i2c_write:
                                    143 ;	../src/i2c.c: 45: I2C->DR = data;
      0080E4 AE 52 16         [ 2]  144 	ldw	x, #0x5216
      0080E7 7B 03            [ 1]  145 	ld	a, (0x03, sp)
      0080E9 F7               [ 1]  146 	ld	(x), a
                                    147 ;	../src/i2c.c: 46: i = 0;
      0080EA 5F               [ 1]  148 	clrw	x
                                    149 ;	../src/i2c.c: 47: while (!(I2C->SR1 & I2C_SR1_TXE) && i < 800)
      0080EB                        150 00102$:
      0080EB C6 52 17         [ 1]  151 	ld	a, 0x5217
      0080EE 4D               [ 1]  152 	tnz	a
      0080EF 2A 01            [ 1]  153 	jrpl	00119$
      0080F1 81               [ 4]  154 	ret
      0080F2                        155 00119$:
      0080F2 A3 03 20         [ 2]  156 	cpw	x, #0x0320
      0080F5 25 01            [ 1]  157 	jrc	00120$
      0080F7 81               [ 4]  158 	ret
      0080F8                        159 00120$:
                                    160 ;	../src/i2c.c: 48: i++;
      0080F8 5C               [ 1]  161 	incw	x
      0080F9 20 F0            [ 2]  162 	jra	00102$
                                    163 ;	../src/i2c.c: 49: }
      0080FB 81               [ 4]  164 	ret
                                    165 ;	../src/i2c.c: 51: void i2c_write_addr(uint8_t addr) {
                                    166 ;	-----------------------------------------
                                    167 ;	 function i2c_write_addr
                                    168 ;	-----------------------------------------
      0080FC                        169 _i2c_write_addr:
                                    170 ;	../src/i2c.c: 53: I2C->DR = addr;
      0080FC AE 52 16         [ 2]  171 	ldw	x, #0x5216
      0080FF 7B 03            [ 1]  172 	ld	a, (0x03, sp)
      008101 F7               [ 1]  173 	ld	(x), a
                                    174 ;	../src/i2c.c: 54: i = 0;
      008102 5F               [ 1]  175 	clrw	x
                                    176 ;	../src/i2c.c: 55: while (!(I2C->SR1 & I2C_SR1_ADDR) && i < 800)
      008103                        177 00102$:
      008103 C6 52 17         [ 1]  178 	ld	a, 0x5217
      008106 A5 02            [ 1]  179 	bcp	a, #0x02
      008108 26 08            [ 1]  180 	jrne	00104$
      00810A A3 03 20         [ 2]  181 	cpw	x, #0x0320
      00810D 24 03            [ 1]  182 	jrnc	00104$
                                    183 ;	../src/i2c.c: 56: i++;;
      00810F 5C               [ 1]  184 	incw	x
      008110 20 F1            [ 2]  185 	jra	00102$
      008112                        186 00104$:
                                    187 ;	../src/i2c.c: 57: (void) I2C->SR3; // check BUS_BUSY
      008112 AE 52 19         [ 2]  188 	ldw	x, #0x5219
      008115 F6               [ 1]  189 	ld	a, (x)
                                    190 ;	../src/i2c.c: 58: I2C->CR2 |= (I2C_CR2_ACK);
      008116 72 14 52 11      [ 1]  191 	bset	21009, #2
                                    192 ;	../src/i2c.c: 59: }
      00811A 81               [ 4]  193 	ret
                                    194 ;	../src/i2c.c: 61: uint8_t i2c_read() {
                                    195 ;	-----------------------------------------
                                    196 ;	 function i2c_read
                                    197 ;	-----------------------------------------
      00811B                        198 _i2c_read:
                                    199 ;	../src/i2c.c: 62: I2C->CR2 &= ~(I2C_CR2_ACK);
      00811B 72 15 52 11      [ 1]  200 	bres	21009, #2
                                    201 ;	../src/i2c.c: 63: i2c_stop();
      00811F CD 80 C7         [ 4]  202 	call	_i2c_stop
                                    203 ;	../src/i2c.c: 64: while (!(I2C->SR1 & I2C_SR1_RXNE)) ;
      008122                        204 00101$:
      008122 C6 52 17         [ 1]  205 	ld	a, 0x5217
      008125 A5 40            [ 1]  206 	bcp	a, #0x40
      008127 27 F9            [ 1]  207 	jreq	00101$
                                    208 ;	../src/i2c.c: 65: return I2C->DR;
      008129 C6 52 16         [ 1]  209 	ld	a, 0x5216
                                    210 ;	../src/i2c.c: 66: }
      00812C 81               [ 4]  211 	ret
                                    212 ;	../src/i2c.c: 68: void i2c_read_arr(uint8_t *buf, uint8_t len) {
                                    213 ;	-----------------------------------------
                                    214 ;	 function i2c_read_arr
                                    215 ;	-----------------------------------------
      00812D                        216 _i2c_read_arr:
                                    217 ;	../src/i2c.c: 69: while (len-- > 1) {
      00812D                        218 00104$:
      00812D 7B 05            [ 1]  219 	ld	a, (0x05, sp)
      00812F 88               [ 1]  220 	push	a
      008130 7B 01            [ 1]  221 	ld	a, (1, sp)
      008132 4A               [ 1]  222 	dec	a
      008133 6B 06            [ 1]  223 	ld	(0x06, sp), a
      008135 84               [ 1]  224 	pop	a
                                    225 ;	../src/i2c.c: 72: *(buf++) = I2C->DR;
      008136 1E 03            [ 2]  226 	ldw	x, (0x03, sp)
                                    227 ;	../src/i2c.c: 69: while (len-- > 1) {
      008138 A1 01            [ 1]  228 	cp	a, #0x01
      00813A 23 14            [ 2]  229 	jrule	00106$
                                    230 ;	../src/i2c.c: 70: I2C->CR2 |= (1 << I2C_CR2_ACK);
      00813C 72 18 52 11      [ 1]  231 	bset	21009, #4
                                    232 ;	../src/i2c.c: 71: while (!(I2C->SR1 & I2C_SR1_RXNE)) ;
      008140                        233 00101$:
      008140 C6 52 17         [ 1]  234 	ld	a, 0x5217
      008143 A5 40            [ 1]  235 	bcp	a, #0x40
      008145 27 F9            [ 1]  236 	jreq	00101$
                                    237 ;	../src/i2c.c: 72: *(buf++) = I2C->DR;
      008147 C6 52 16         [ 1]  238 	ld	a, 0x5216
      00814A F7               [ 1]  239 	ld	(x), a
      00814B 5C               [ 1]  240 	incw	x
      00814C 1F 03            [ 2]  241 	ldw	(0x03, sp), x
      00814E 20 DD            [ 2]  242 	jra	00104$
      008150                        243 00106$:
                                    244 ;	../src/i2c.c: 74: *buf = i2c_read();
      008150 89               [ 2]  245 	pushw	x
      008151 CD 81 1B         [ 4]  246 	call	_i2c_read
      008154 85               [ 2]  247 	popw	x
      008155 F7               [ 1]  248 	ld	(x), a
                                    249 ;	../src/i2c.c: 75: }
      008156 81               [ 4]  250 	ret
                                    251 	.area CODE
                                    252 	.area INITIALIZER
                                    253 	.area CABS (ABS)
